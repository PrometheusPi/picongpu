/**
 * Copyright 2013-2017 Axel Huebl, Anton Helm, Rene Widera, Richard Pausch, Alexander Debus
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once


namespace picongpu
{
    namespace laserGaussianBeam
    {
        // Asymetric sinus used: starts with phase=0 at center --> E-field=0 at center
        namespace SI
        {
            /** unit: meter */
            BOOST_CONSTEXPR_OR_CONST float_64 WAVE_LENGTH_SI = 0.8e-6;

            /** UNITCONV */
            BOOST_CONSTEXPR_OR_CONST float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

            /** unit: W / m^2 */
            // calculate: _A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized)

            /** unit: none */
            BOOST_CONSTEXPR_OR_CONST float_64 _A0  = 2.8;

            /** unit: Volt /meter */
            BOOST_CONSTEXPR_OR_CONST float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

            /** unit: Volt /meter */
            //BOOST_CONSTEXPR_OR_CONST float_64 AMPLITUDE_SI = 1.738e13;

            /** Pulse length: sigma of std. gauss for intensity (E^2)
             *  PULSE_LENGTH_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
             *                                          [    2.354820045     ]
             *  Info:             FWHM_of_Intensity = FWHM_Illumination
             *                      = what a experimentalist calls "pulse duration"
             *  unit: seconds (1 sigma) */
            BOOST_CONSTEXPR_OR_CONST float_64 PULSE_LENGTH_SI = 30.0e-15 / 2.354820045;

            /** beam waist: distance from the axis where the pulse intensity (E^2)
             *              decreases to its 1/e^2-th part,
             *              at the focus position of the laser
             * W0_SI = FWHM_of_Intensity / sqrt{ 2* ln(2) }
             *                             [   1.17741    ]
             *  unit: meter */
            BOOST_CONSTEXPR_OR_CONST float_64 W0_SI = 19.0e-6 / 1.17741;
            /** the distance to the laser focus in y-direction
             *  unit: meter */
            BOOST_CONSTEXPR_OR_CONST float_64 FOCUS_POS_SI = 1.6e-3 + 1.5e-3;
        }
        /** The laser pulse will be initialized PULSE_INIT times of the PULSE_LENGTH
         *  unit: none */
        BOOST_CONSTEXPR_OR_CONST float_64 PULSE_INIT = 12.0;

        /* laser phase shift (no shift: 0.0) */
        BOOST_CONSTEXPR_OR_CONST float_X LASER_PHASE = 0.0; /* unit: rad, periodic in 2*pi */

        /* Use only the 0th Laguerremode for a standard Gaussian */
        constexpr uint32_t MODENUMBER = 0;
        PMACC_CONST_VECTOR(float_X, MODENUMBER + 1, LAGUERREMODES, 1.0);

        enum PolarisationType
        {
            LINEAR_X = 1u,
            LINEAR_Z = 2u,
            CIRCULAR = 4u,
        };
        BOOST_CONSTEXPR_OR_CONST PolarisationType Polarisation = LINEAR_X;
    }

} /* namespace picongpu */


