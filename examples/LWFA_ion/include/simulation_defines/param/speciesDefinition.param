/**
 * Copyright 2013-2016 Rene Widera, Marco Garten, Richard Pausch,
 *                     Benjamin Worpitz
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once

#include "simulation_defines.hpp"
#include "particles/Identifier.hpp"
#include "compileTime/conversion/MakeSeq.hpp"
#include "dimensions/DataSpace.hpp"
#include "identifier/identifier.hpp"
#include "identifier/alias.hpp"
#include "identifier/value_identifier.hpp"

#include "particles/Particles.hpp"
#include "particles/ParticleDescription.hpp"
#include <boost/mpl/string.hpp>

#include "particles/ionization/byField/ionizers.def"

namespace picongpu
{

/*########################### define particle attributes #####################*/

/** describe attributes of a particle*/
typedef MakeSeq<position<position_pic>, momentum, weighting>::type DefaultParticleAttributes;

/** \todo: not nice, we change this later with nice interfaces
 * Plugins should add required attributes
 */

/*add old momentum for radiation plugin*/
typedef MakeSeq<
#if(ENABLE_RADIATION == 1)
momentumPrev1
#endif
>::type AttributMomentum_mt1;

/*add old radiation flag for radiation plugin*/
typedef MakeSeq<
#if(RAD_MARK_PARTICLE>1) || (RAD_ACTIVATE_GAMMA_FILTER!=0)
radiationFlag
#endif
>::type AttributRadiationFlag;

/* attribute sequence for species: electrons */
typedef
MakeSeq<
DefaultParticleAttributes,
AttributMomentum_mt1,
AttributRadiationFlag
>::type AttributeSeqElectrons;

/* attribute sequence for species: ions */
typedef
MakeSeq<
DefaultParticleAttributes,
AttributMomentum_mt1,
AttributRadiationFlag,
boundElectrons
>::type AttributeSeqIons;

/*########################### end particle attributes ########################*/

/*########################### define species #################################*/


/*--------------------------- electrons --------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier(float_X, MassRatioElectrons, 1.0);
value_identifier(float_X, ChargeRatioElectrons, 1.0);

/* ratio relateive to GAS_DENSITY for this species */
value_identifier(float_X, DensityRatioElectrons, 1.0);

typedef bmpl::vector<
    particlePusher<UsedParticlePusher>,
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    current<UsedParticleCurrentSolver>,
    massRatio<MassRatioElectrons>,
    chargeRatio<ChargeRatioElectrons>,
    densityRatio<DensityRatioElectrons>
> ParticleFlagsElectrons;

/* define species: electrons */
typedef Particles<
    ParticleDescription<
        bmpl::string<'e'>,
        SuperCellSize,
        AttributeSeqElectrons,
        ParticleFlagsElectrons
    >
> PIC_Electrons;




typedef bmpl::vector<
    particlePusher<UsedParticlePusher>,
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    current<UsedParticleCurrentSolver>,
    massRatio<MassRatioElectrons>,
    chargeRatio<ChargeRatioElectrons>
> ParticleFlagsElectrons_N;

/* define species: electrons */
typedef Particles<
    ParticleDescription<
        bmpl::string<'e','n'>,
        SuperCellSize,
        AttributeSeqElectrons,
        ParticleFlagsElectrons_N
    >
> PIC_Electrons_Nitrogen;



/*--------------------------- ions -------------------------------------------*/

/*! Specify (chemical) element
 *
 * Proton and neutron numbers define the chemical element that the ion species
 * is based on. This value can be non-integer for physical models taking
 * charge shielding effects into account.
 * @see http://en.wikipedia.org/wiki/Effective_nuclear_charge
 *
 * It is wrapped into a struct because of C++ restricting floats from being
 * template arguments.
 *
 * Do not forget to set the correct mass of the atom in
 * @see physicalConstants.param !
 */


/*--------------------------- Nitrogen -------------------------------------------*/

/* ratio relative to BASE_CHARGE and BASE_MASS */
value_identifier(float_X, MassRatioNitrogen, 25514.32503);
value_identifier(float_X, ChargeRatioNitrogen, -7.0);

/* ratio relateive to GAS_DENSITY for this species */
value_identifier(float_X, DensityRatioNitrogen, 0.5 * 0.05 ); /* ratio He/e_He (=0.5) * doping (=5%) */

struct Nitrogen
{
    BOOST_STATIC_CONSTEXPR float_X numberOfProtons  = 7.0;
    BOOST_STATIC_CONSTEXPR float_X numberOfNeutrons = 7.0;
};
typedef bmpl::vector<
    particlePusher<UsedParticlePusher>,
    shape<UsedParticleShape>,
    interpolation<UsedField2Particle>,
    current<UsedParticleCurrentSolver>,
    massRatio<MassRatioNitrogen>,
    chargeRatio<ChargeRatioNitrogen>,
    densityRatio<DensityRatioNitrogen>,
    #if(PARAM_IONIZATION == 1)
    ionizer<particles::ionization::BSIHydrogenLike<PIC_Electrons_Nitrogen> >,
    ionizationEnergies<AU::IONIZATION_ENERGY_NITROGEN_t>,
    #endif
    atomicNumbers<Nitrogen>
> ParticleFlagsNitrogen;

/* define species: ions */
typedef Particles<
    ParticleDescription<
        bmpl::string<'n'>,
        SuperCellSize,
        AttributeSeqIons,
        ParticleFlagsNitrogen
    >
> PIC_Nitrogen;



/*########################### end species ####################################*/

/*! we delete this ugly definition of VectorAllSpecies after all picongpu components
 * support multi species */
/** \todo: not nice, but this should be changed in the future*/
typedef MakeSeq<
#if (ENABLE_ELECTRONS == 1)
PIC_Electrons,
PIC_Electrons_Nitrogen
#endif
>::type Species1;

typedef MakeSeq<
#if (ENABLE_IONS == 1)
PIC_Nitrogen
#endif
>::type Species2;

typedef MakeSeq<
Species1,
Species2
>::type VectorAllSpecies;

typedef MakeSeq<
Species2
>::type VectorAllElectrons;



} //namespace picongpu
