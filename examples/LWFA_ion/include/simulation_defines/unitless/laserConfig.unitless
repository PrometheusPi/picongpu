/**
 * Copyright 2013-2016 Axel Huebl, Anton Helm, Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */



#pragma once



namespace picongpu
{

    namespace laserGaussianBeam
    {
        //normed laser parameter
        BOOST_CONSTEXPR_OR_CONST float_X WAVE_LENGTH = float_X (SI::WAVE_LENGTH_SI / UNIT_LENGTH); //unit: meter
        BOOST_CONSTEXPR_OR_CONST float_X PULSE_LENGTH = float_X (SI::PULSE_LENGTH_SI / UNIT_TIME); //unit: seconds (1 sigma)
        BOOST_CONSTEXPR_OR_CONST float_X AMPLITUDE = float_X (SI::AMPLITUDE_SI / UNIT_EFIELD); //unit: Volt /meter
        BOOST_CONSTEXPR_OR_CONST float_X W0 = float_X(SI::W0_SI / UNIT_LENGTH); // unit: meter
        BOOST_CONSTEXPR_OR_CONST float_X FOCUS_POS = float_X(SI::FOCUS_POS_SI / UNIT_LENGTH); //unit: meter
        BOOST_CONSTEXPR_OR_CONST float_X INIT_TIME = float_X ((PULSE_INIT*SI::PULSE_LENGTH_SI) / UNIT_TIME); // unit: seconds (full inizialisation length)
    }

}

    /* include implemented laser profiles */
#include "fields/laserProfiles/laserGaussianBeam.hpp"
